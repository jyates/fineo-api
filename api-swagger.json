{
  "swagger": "2.0",
  "info": {
    "version": "2016-08-05T01:18:49Z",
    "title": "fineo-ingest"
  },
  "host": "ingest.fineo.io",
  "title": "fineo-ingest",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "./template/input/stream/event" : {
  "put": {
    "tags": [
      "stream"
    ],
    "consumes": [
  "application/json"
]
,
    "produces": [
  "application/json"
]
,
    "parameters": [
      {
        "in": "body",
        "name": "SingleStreamEvent",
        "required": true,
        "schema": {
          "$ref": "#/definitions/SingleStreamEvent"
        }
      }
    ],
    "responses": {
      "200": {
  "description": "200 response",
  "schema": {
    "$ref": "#/definitions/Empty"
  }
}
,
      "400": {
  "description": "400 response",
  "schema": {
    "$ref": "#/definitions/Error"
  }
}
,
      "500": {
  "description": "500 response",
  "schema": {
    "$ref": "#/definitions/Error"
  }
}

    },
    "security": [
  {
  "sigv4": []
  },
  {
  "api_key": []
  }
]
,
    "x-amazon-apigateway-integration": {
      "credentials": "arn:aws:iam::766732214526:role/apigateway_stream-kinesis",
      "requestTemplates": {
        "application/json": "#set($orgID = $context.identity.apiKey)\n#set($bodyJson = $util.parseJson($input.body))\n#set($bodyJson.companykey = $orgID)\n#set($data = $util.base64Encode(\"$bodyJson\"))\n{\n    \"StreamName\": \"fineo-customer-ingest\",\n    \"Data\": \"$data\",\n    \"PartitionKey\": \"$orgID\"\n}"
      },
      "uri": "arn:aws:apigateway:us-east-1:kinesis:action/PutRecord",
      "passthroughBehavior": "never",
      "responses": {
        "200": {
          "statusCode": "200"
        },
        "400": {
          "statusCode": "400"
        },
        "500": {
          "statusCode": "500"
        }
      },
      "requestParameters": {
        "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
      },
      "httpMethod": "POST",
      "type": "aws"
    }
  }
}
,"./template/input/stream/events" : {
  "put": {
    "tags": [
      "stream"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "in": "body",
        "name": "MultiStreamEvent",
        "required": true,
        "schema": {
          "$ref": "#/definitions/MultiStreamEvent"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "200 response",
        "schema": {
          "$ref": "#/definitions/Empty"
        }
      },
      "400": {
        "description": "400 response",
        "schema": {
          "$ref": "#/definitions/Error"
        }
      },
      "500": {
        "description": "500 response",
        "schema": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "security": [
      {
        "sigv4": []
      },
      {
        "api_key": []
      }
    ],
    "x-amazon-apigateway-integration": {
      "credentials": "arn:aws:iam::766732214526:role/apigateway_stream-kinesis",
      "requestTemplates": {
        "application/json": "#set($orgID = $context.identity.apiKey)\n#set($bodyJson = $util.parseJson($input.body))\n#set($bodyJson.companykey = $orgID)\n{\n    \"StreamName\": \"fineo-customer-ingest\",\n    \"Records\": [\n        #foreach($elem in $bodyJson)\n{\n            #set($elem.companykey = $orgID)\n            \"Data\": \"$util.base64Encode($elem)\",\n            \"PartitionKey\": \"$orgID\"\n        }#if($foreach.hasNext),#end\n        #end\n    ]\n}\n"
      },
      "uri": "arn:aws:apigateway:us-east-1:kinesis:action/PutRecords",
      "passthroughBehavior": "never",
      "responses": {
        "200": {
          "statusCode": "200"
        },
        "400": {
          "statusCode": "400"
        },
        "500": {
          "statusCode": "500"
        }
      },
      "requestParameters": {
        "integration.request.header.Content-Type": "'application/x-amz-json-1.1'"
      },
      "httpMethod": "POST",
      "type": "aws"
    }
  }
}
,"./template/input/batch/status/{file}" : {
  "get": {
    "produces": [
      "application/json",
      "application/xml"
    ],
    "parameters": [
      {
        "name": "file",
        "in": "path",
        "required": true,
        "type": "string"
      }
    ],
    "responses": {
      "200": {
        "description": "200 response",
        "schema": {
          "$ref": "#/definitions/Empty"
        },
        "headers": {
          "Timestamp": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          }
        }
      },
      "404": {
        "description": "404 response"
      }
    },
    "security": [
  {
  "sigv4": []
  },
  {
  "api_key": []
  }
]
,
    "x-amazon-apigateway-integration": {
      "credentials": "arn:aws:iam::766732214526:role/apigateway_batch-get-s3",
      "uri": "arn:aws:apigateway:us-east-1:s3:path/batch.fineo.io/ingest/{user}_{file}",
      "passthroughBehavior": "never",
      "responses": {
        "4\\d{2}": {
          "statusCode": "404"
        },
        "default": {
          "statusCode": "200",
          "responseParameters": {
            "method.response.header.Content-Type": "integration.response.header.Content-Type",
            "method.response.header.Timestamp": "integration.response.header.Date"
          }
        }
      },
      "requestParameters": {
        "integration.request.path.user": "context.identity.apiKey",
        "integration.request.path.file": "method.request.path.file"
      },
      "httpMethod": "HEAD",
      "type": "aws"
    }
  }
}
,"./template/input/batch/upload/data/{file}" : {
  "post": {
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "Content-Type",
        "in": "header",
        "required": false,
        "type": "string"
      },
      {
        "name": "file",
        "in": "path",
        "required": true,
        "type": "string"
      },
      {
        "in": "body",
        "name": "BatchUploadContent",
        "required": true,
        "schema": {
          "$ref": "#/definitions/BatchUploadContent"
        }
      }
    ],
    "responses": {
      "200": {
  "description": "200 response",
  "schema": {
    "$ref": "#/definitions/Empty"
  }
}

    },
    "security": [
  {
  "sigv4": []
  },
  {
  "api_key": []
  }
]
,
    "x-amazon-apigateway-integration": {
      "credentials": "arn:aws:iam::766732214526:role/apigateway_batch-upload-file",
      "uri": "arn:aws:apigateway:us-east-1:s3:path/batch.fineo.io/ingest/{user}_{file}",
      "passthroughBehavior": "when_no_match",
      "responses": {
        "\\d{3}": {
          "statusCode": "200"
        }
      },
      "requestParameters": {
        "integration.request.path.user": "context.identity.apiKey",
        "integration.request.path.file": "method.request.path.file",
        "integration.request.header.Content-Type": "method.request.header.Content-Type"
      },
      "httpMethod": "PUT",
      "type": "aws"
    }
  }
}
,"./template/input/batch/upload/file" : {
  "post": {
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "in": "body",
        "name": "BatchUploadRemoteS3File",
        "required": true,
        "schema": {
          "$ref": "#/definitions/batchUploadRemoteS3File"
        }
      }
    ],
    "responses": {
      "200": {
  "description": "200 response",
  "schema": {
    "$ref": "#/definitions/Empty"
  }
}

    },
    "security": [
  {
  "sigv4": []
  },
  {
  "api_key": []
  }
]
,
    "x-amazon-apigateway-integration": {
      "credentials": "arn:aws:iam::766732214526:role/apigateway_batch-upload-file",
      "requestTemplates": {
        "application/json": "{ }"
      },
      "uri": "arn:aws:apigateway:us-east-1:sns:action/Publish",
      "passthroughBehavior": "never",
      "responses": {
        "default": {
          "statusCode": "200",
          "responseTemplates": {
            "application/json": "#set($inputRoot = $input.path('$'))\n{ }"
          }
        }
      },
      "requestParameters": {
        "integration.request.querystring.TopicArn": "'arn:aws:sns:us-east-1:766732214526:batch-ingest-files_remote'",
        "integration.request.querystring.Subject": "context.identity.apiKey",
        "integration.request.querystring.Message": "method.request.body.FilePath"
      },
      "httpMethod": "POST",
      "type": "aws"
    }
  },
  "put": {
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "FilePath",
        "in": "query",
        "required": false,
        "type": "string"
      }
    ],
    "responses": {
      "200": {
  "description": "200 response",
  "schema": {
    "$ref": "#/definitions/Empty"
  }
}

    },
    "security": [
  {
  "sigv4": []
  },
  {
  "api_key": []
  }
]
,
    "x-amazon-apigateway-integration": {
      "credentials": "arn:aws:iam::766732214526:role/apigateway_batch-upload-file",
      "uri": "arn:aws:apigateway:us-east-1:sns:action/Publish",
      "passthroughBehavior": "never",
      "responses": {
        "default": {
          "statusCode": "200"
        }
      },
      "requestParameters": {
        "integration.request.querystring.TopicArn": "'arn:aws:sns:us-east-1:766732214526:batch-ingest-files_remote'",
        "integration.request.querystring.Subject": "context.identity.apikey",
        "integration.request.querystring.Message": "method.request.querystring.FilePath"
      },
      "httpMethod": "POST",
      "type": "aws"
    }
  }
}

  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "x-api-key",
      "in": "header"
    },
    "sigv4": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "definitions": {
    "BatchUploadEvents" : {
  "type": "array",
  "description": "JSON blob of multiple event to batch upload. Max size: 10MB",
  "items": {
    "$ref": "#/definitions/SingleStreamEvent"
  }
}
    ,"BatchUploadRemoteS3File" : {
  "type": "object",
  "properties": {
    "FilePath": {
      "type": "string"
    }
  }
}
    ,"Empty" : {
  "type": "object"
}
    ,"Error" : {
  "type": "object",
  "properties": {
    "message": {
      "type": "string"
    }
  }
}
    ,"MultiStreamEvent" : {
  "description": "Up to 500 records - each record up to 1MB - up to 5MB total per request",
  "type": "array",
  "items": {
    "$ref": "#/definitions/SingleStreamEvent"
  }
}
    ,"SingleStreamEvent" : {
  "type": "object",
  "required": [
    "metrictype",
    "timestamp"
  ],
  "properties": {
    "timestamp": {
      "type": "number",
      "minimum": 31536000000
    },
    "metrictype": {
      "type": "string"
    },
    "additionalProperties": {
      "type": "object",
      "properties": {}
    }
  },
  "description": "Single event at a timestamp. Max size: 1MB"
}

  }
}
